{"ast":null,"code":"import { API_BASE_URL } from \"./api\";\nexport async function detectDisease(imageFile, cropType, location) {\n  if (!imageFile) throw new Error(\"Image is required\");\n  const formData = new FormData();\n  formData.append(\"image\", imageFile);\n  if (cropType) formData.append(\"cropType\", cropType);\n  if (location) formData.append(\"location\", location);\n  const response = await fetch(`${API_BASE_URL}/api/disease-detection`, {\n    method: \"POST\",\n    body: formData // Let the browser set multipart boundary\n  });\n  if (!response.ok) {\n    let message = \"Disease detection failed\";\n    try {\n      const err = await response.json();\n      message = (err === null || err === void 0 ? void 0 : err.error) || message;\n    } catch {\n      try {\n        message = await response.text();\n      } catch {}\n    }\n    throw new Error(message);\n  }\n  return response.json();\n}","map":{"version":3,"names":["API_BASE_URL","detectDisease","imageFile","cropType","location","Error","formData","FormData","append","response","fetch","method","body","ok","message","err","json","error","text"],"sources":["C:/Users/shres/krishi-suvidha/src/services/diseaseDetectionService.js"],"sourcesContent":["import { API_BASE_URL } from \"./api\";\r\n\r\nexport async function detectDisease(imageFile, cropType, location) {\r\n  if (!imageFile) throw new Error(\"Image is required\");\r\n\r\n  const formData = new FormData();\r\n  formData.append(\"image\", imageFile);\r\n  if (cropType) formData.append(\"cropType\", cropType);\r\n  if (location) formData.append(\"location\", location);\r\n\r\n  const response = await fetch(`${API_BASE_URL}/api/disease-detection`, {\r\n    method: \"POST\",\r\n    body: formData, // Let the browser set multipart boundary\r\n  });\r\n\r\n  if (!response.ok) {\r\n    let message = \"Disease detection failed\";\r\n    try {\r\n      const err = await response.json();\r\n      message = err?.error || message;\r\n    } catch {\r\n      try {\r\n        message = await response.text();\r\n      } catch {}\r\n    }\r\n    throw new Error(message);\r\n  }\r\n\r\n  return response.json();\r\n}\r\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,OAAO;AAEpC,OAAO,eAAeC,aAAaA,CAACC,SAAS,EAAEC,QAAQ,EAAEC,QAAQ,EAAE;EACjE,IAAI,CAACF,SAAS,EAAE,MAAM,IAAIG,KAAK,CAAC,mBAAmB,CAAC;EAEpD,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEN,SAAS,CAAC;EACnC,IAAIC,QAAQ,EAAEG,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEL,QAAQ,CAAC;EACnD,IAAIC,QAAQ,EAAEE,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEJ,QAAQ,CAAC;EAEnD,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGV,YAAY,wBAAwB,EAAE;IACpEW,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEN,QAAQ,CAAE;EAClB,CAAC,CAAC;EAEF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE;IAChB,IAAIC,OAAO,GAAG,0BAA0B;IACxC,IAAI;MACF,MAAMC,GAAG,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;MACjCF,OAAO,GAAG,CAAAC,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEE,KAAK,KAAIH,OAAO;IACjC,CAAC,CAAC,MAAM;MACN,IAAI;QACFA,OAAO,GAAG,MAAML,QAAQ,CAACS,IAAI,CAAC,CAAC;MACjC,CAAC,CAAC,MAAM,CAAC;IACX;IACA,MAAM,IAAIb,KAAK,CAACS,OAAO,CAAC;EAC1B;EAEA,OAAOL,QAAQ,CAACO,IAAI,CAAC,CAAC;AACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}