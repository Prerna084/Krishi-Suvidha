const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// Open (or create) SQLite database file
const db = new sqlite3.Database(path.resolve(__dirname, '../data/krishi-saathi.db'), (err) => {
  if (err) {
    console.error('Failed to connect to SQLite database:', err.message);
  } else {
    console.log('Connected to SQLite database.');
  }
});

// Initialize tables if not exist
db.serialize(() => {
  // Buyers table
  db.run(`
    CREATE TABLE IF NOT EXISTS buyers (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      crop TEXT NOT NULL,
      location TEXT NOT NULL,
      contact TEXT NOT NULL
    )
  `);

  // Kendras table
  db.run(`
    CREATE TABLE IF NOT EXISTS kendras (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      location TEXT NOT NULL,
      contact TEXT NOT NULL
    )
  `);

  // Shipments table (for logistics)
  db.run(`
    CREATE TABLE IF NOT EXISTS shipments (
      shipmentId TEXT PRIMARY KEY,
      farmerName TEXT NOT NULL,
      contact TEXT NOT NULL,
      pickupLocation TEXT NOT NULL,
      dropLocation TEXT NOT NULL,
      cropType TEXT NOT NULL,
      quantity INTEGER NOT NULL,
      status TEXT NOT NULL,
      estimatedDelivery TEXT,
      transporter TEXT
    )
  `);

  // Add other tables as needed
});

// Example function to get buyers filtered by crop and location
function getBuyers(crop, location) {
  return new Promise((resolve, reject) => {
    let query = "SELECT * FROM buyers WHERE 1=1";
    const params = [];

    if (crop) {
      query += " AND LOWER(crop) LIKE ?";
      params.push(`%${crop.toLowerCase()}%`);
    }
    if (location) {
      query += " AND LOWER(location) LIKE ?";
      params.push(`%${location.toLowerCase()}%`);
    }

    db.all(query, params, (err, rows) => {
      if (err) reject(err);
      else resolve(rows);
    });
  });
}

// Example function to add a shipment
function addShipment(shipment) {
  return new Promise((resolve, reject) => {
    const {
      shipmentId,
      farmerName,
      contact,
      pickupLocation,
      dropLocation,
      cropType,
      quantity,
      status,
      estimatedDelivery,
      transporter
    } = shipment;

    const query = `
      INSERT INTO shipments (
        shipmentId, farmerName, contact, pickupLocation, dropLocation,
        cropType, quantity, status, estimatedDelivery, transporter
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `;

    db.run(query, [
      shipmentId, farmerName, contact, pickupLocation, dropLocation,
      cropType, quantity, status, estimatedDelivery, transporter
    ], function(err) {
      if (err) reject(err);
      else resolve(this.lastID);
    });
  });
}

// Export functions
module.exports = {
  db,
  getBuyers,
  addShipment,
  // Add other DB functions as needed
};
